import json

# Read the existing notebook
with open('train_bert_model_CLEAN.ipynb', 'r') as f:
    notebook = json.load(f)

# Create the two new cells
ui_cells = [
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
            "## üéÆ Interactive Email Classification UI"
        ]
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "# Interactive UI for email classification\n",
            "import ipywidgets as widgets\n",
            "from IPython.display import display, HTML\n",
            "\n",
            "def predict_email(subject, message):\n",
            "    \"\"\"Predict the category of an email\"\"\"\n",
            "    try:\n",
            "        # Combine subject and message\n",
            "        text = f\"{subject} {message}\"\n",
            "        \n",
            "        # Tokenize\n",
            "        inputs = tokenizer(text, return_tensors=\"pt\", padding=True, truncation=True, max_length=512)\n",
            "        inputs = {k: v.to(device) for k, v in inputs.items()}\n",
            "        \n",
            "        # Predict\n",
            "        with torch.no_grad():\n",
            "            outputs = model(**inputs)\n",
            "            probabilities = torch.softmax(outputs.logits, dim=1)\n",
            "            predicted_class = torch.argmax(probabilities, dim=1).item()\n",
            "            confidence = probabilities[0][predicted_class].item()\n",
            "        \n",
            "        predicted_label = label_encoder.classes_[predicted_class]\n",
            "        \n",
            "        return predicted_label, confidence, probabilities[0].cpu().numpy()\n",
            "    except Exception as e:\n",
            "        return f\"Error: {str(e)}\", 0.0, None\n",
            "\n",
            "# Create UI widgets\n",
            "subject_input = widgets.Text(\n",
            "    value='',\n",
            "    placeholder='Enter email subject...',\n",
            "    description='Subject:',\n",
            "    style={'description_width': '100px'},\n",
            "    layout=widgets.Layout(width='500px')\n",
            ")\n",
            "\n",
            "message_input = widgets.Textarea(\n",
            "    value='',\n",
            "    placeholder='Enter email message...',\n",
            "    description='Message:',\n",
            "    style={'description_width': '100px'},\n",
            "    layout=widgets.Layout(width='500px', height='150px')\n",
            ")\n",
            "\n",
            "classify_button = widgets.Button(\n",
            "    description='Classify Email',\n",
            "    button_style='primary',\n",
            "    layout=widgets.Layout(width='200px')\n",
            ")\n",
            "\n",
            "result_output = widgets.HTML(\n",
            "    value='<p>Enter an email subject and message above, then click Classify Email.</p>',\n",
            "    layout=widgets.Layout(width='600px')\n",
            ")\n",
            "\n",
            "def on_classify_click(b):\n",
            "    subject = subject_input.value.strip()\n",
            "    message = message_input.value.strip()\n",
            "    \n",
            "    if not subject or not message:\n",
            "        result_output.value = '<p style=\"color: red;\">Please enter both subject and message.</p>'\n",
            "        return\n",
            "    \n",
            "    predicted_label, confidence, probabilities = predict_email(subject, message)\n",
            "    \n",
            "    if isinstance(predicted_label, str) and predicted_label.startswith('Error:'):\n",
            "        result_output.value = f'<p style=\"color: red;\">{predicted_label}</p>'\n",
            "        return\n",
            "    \n",
            "    # Create result display\n",
            "    result_html = f'''\n",
            "    <div style=\"border: 2px solid #4CAF50; border-radius: 10px; padding: 20px; background-color: #f9f9f9;\">\n",
            "        <h3 style=\"color: #4CAF50; margin-top: 0;\">üéØ Classification Result</h3>\n",
            "        <p><strong>Predicted Category:</strong> <span style=\"color: #2196F3; font-size: 18px;\">{predicted_label}</span></p>\n",
            "        <p><strong>Confidence:</strong> <span style=\"color: #FF9800; font-size: 16px;\">{confidence:.2%}</span></p>\n",
            "        <h4>All Category Probabilities:</h4>\n",
            "        <ul>\n",
            "    '''\n",
            "    \n",
            "    for i, (class_name, prob) in enumerate(zip(label_encoder.classes_, probabilities)):\n",
            "        color = '#4CAF50' if class_name == predicted_label else '#666'\n",
            "        result_html += f'<li style=\"color: {color};\"><strong>{class_name}:</strong> {prob:.2%}</li>'\n",
            "    \n",
            "    result_html += '</ul></div>'\n",
            "    result_output.value = result_html\n",
            "\n",
            "classify_button.on_click(on_classify_click)\n",
            "\n",
            "# Display the UI\n",
            "print('üéÆ Interactive Email Classification UI')\n",
            "print('=' * 50)\n",
            "display(subject_input)\n",
            "display(message_input)\n",
            "display(classify_button)\n",
            "display(result_output)"
        ]
    },
    {
        "cell_type": "markdown",
        "metadata": {},
        "source": [
            "## ‚ûï Add Training Data UI"
        ]
    },
    {
        "cell_type": "code",
        "execution_count": None,
        "metadata": {},
        "outputs": [],
        "source": [
            "# Interactive UI for adding new training data\n",
            "def add_training_data(subject, message, label):\n",
            "    \"\"\"Add new training data to the dataset\"\"\"\n",
            "    try:\n",
            "        # Load current dataset\n",
            "        current_df = pd.read_csv('../streamlit_app/data/complete_dataset.csv')\n",
            "        \n",
            "        # Add new row\n",
            "        new_row = pd.DataFrame({\n",
            "            'Subject': [subject],\n",
            "            'Message': [message],\n",
            "            'Label': [label]\n",
            "        })\n",
            "        \n",
            "        # Append and save\n",
            "        updated_df = pd.concat([current_df, new_row], ignore_index=True)\n",
            "        updated_df.to_csv('../streamlit_app/data/complete_dataset.csv', index=False)\n",
            "        \n",
            "        return f\"‚úÖ Added new training example: {label}\"\n",
            "    except Exception as e:\n",
            "        return f\"‚ùå Error: {str(e)}\"\n",
            "\n",
            "# Create UI widgets for adding training data\n",
            "add_subject_input = widgets.Text(\n",
            "    value='',\n",
            "    placeholder='Enter email subject...',\n",
            "    description='Subject:',\n",
            "    style={'description_width': '100px'},\n",
            "    layout=widgets.Layout(width='500px')\n",
            ")\n",
            "\n",
            "add_message_input = widgets.Textarea(\n",
            "    value='',\n",
            "    placeholder='Enter email message...',\n",
            "    description='Message:',\n",
            "    style={'description_width': '100px'},\n",
            "    layout=widgets.Layout(width='500px', height='150px')\n",
            ")\n",
            "\n",
            "add_label_dropdown = widgets.Dropdown(\n",
            "    options=label_encoder.classes_.tolist(),\n",
            "    value=label_encoder.classes_[0],\n",
            "    description='Category:',\n",
            "    style={'description_width': '100px'},\n",
            "    layout=widgets.Layout(width='300px')\n",
            ")\n",
            "\n",
            "add_button = widgets.Button(\n",
            "    description='Add Training Example',\n",
            "    button_style='success',\n",
            "    layout=widgets.Layout(width='200px')\n",
            ")\n",
            "\n",
            "add_result_output = widgets.HTML(\n",
            "    value='<p>Enter new training data above, then click Add Training Example.</p>',\n",
            "    layout=widgets.Layout(width='600px')\n",
            ")\n",
            "\n",
            "def on_add_click(b):\n",
            "    subject = add_subject_input.value.strip()\n",
            "    message = add_message_input.value.strip()\n",
            "    label = add_label_dropdown.value\n",
            "    \n",
            "    if not subject or not message:\n",
            "        add_result_output.value = '<p style=\"color: red;\">Please enter both subject and message.</p>'\n",
            "        return\n",
            "    \n",
            "    result = add_training_data(subject, message, label)\n",
            "    \n",
            "    if result.startswith('‚úÖ'):\n",
            "        add_result_output.value = f'<p style=\"color: green;\">{result}</p>'\n",
            "        # Clear inputs\n",
            "        add_subject_input.value = ''\n",
            "        add_message_input.value = ''\n",
            "    else:\n",
            "        add_result_output.value = f'<p style=\"color: red;\">{result}</p>'\n",
            "\n",
            "add_button.on_click(on_add_click)\n",
            "\n",
            "# Display the UI\n",
            "print('\\n‚ûï Add Training Data UI')\n",
            "print('=' * 30)\n",
            "display(add_subject_input)\n",
            "display(add_message_input)\n",
            "display(add_label_dropdown)\n",
            "display(add_button)\n",
            "display(add_result_output)"
        ]
    }
]

# Add the new cells to the notebook
notebook['cells'].extend(ui_cells)

# Write the updated notebook back
with open('train_bert_model_CLEAN.ipynb', 'w') as f:
    json.dump(notebook, f, indent=1)

print("‚úÖ Added interactive UI cells to the notebook!")
print("üéÆ Email Classification UI added")
print("‚ûï Add Training Data UI added")
print("üìÅ Notebook updated: train_bert_model_CLEAN.ipynb") 